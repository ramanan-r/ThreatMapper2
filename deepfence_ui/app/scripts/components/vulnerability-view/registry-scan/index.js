/* eslint-disable react/destructuring-assignment */
import React from 'react';
import { connect } from 'react-redux';
import classnames from 'classnames';
import SideNavigation from '../../common/side-navigation/side-navigation';
import HeaderView from '../../common/header-view/header-view';
import { ADMIN_SIDE_NAV_MENU_COLLECTION, USER_SIDE_NAV_MENU_COLLECTION } from '../../../constants/menu-collection';
import { getUserRole } from '../../../helpers/auth-helper';
import ContainerImageRegistryCredentials from './credential';
// import RegistryDetails from './registry-details';
import injectModalTrigger from '../../common/generic-modal/modal-trigger-hoc';

class RegistryVulnerabilityScan extends React.PureComponent {
  constructor(props) {
    super(props);
    this.sideNavMenuCollection = (getUserRole() === 'admin') ? ADMIN_SIDE_NAV_MENU_COLLECTION : USER_SIDE_NAV_MENU_COLLECTION;
    this.state = {
      activeMenu: this.sideNavMenuCollection[0]
    };
  }

  render() {
    const {
      isSideNavCollapsed,
      isFiltersViewVisible,
      match,
    } = this.props;
    const divClassName = classnames(
      { 'collapse-side-nav': isSideNavCollapsed },
      { 'expand-side-nav': !isSideNavCollapsed }
    );
    const contentClassName = classnames(
      'container-image-registry',
      { 'with-filters': isFiltersViewVisible },
    );
    return (
      <div>
        <SideNavigation
          navMenuCollection={this.sideNavMenuCollection}
          activeMenu={this.state.activeMenu}
        />
        <div className={divClassName}>
          <HeaderView />
          <div className={contentClassName}>
            <div className="content-wrapper">
              {/* <div className="flex-wrapper"> */}
              <div className="inner-full registry-box-wrapper">

                <ContainerImageRegistryCredentials
                  match={match}
              />
              </div>
              {/* </div> */}
            </div>
          </div>
        </div>
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    isSideNavCollapsed: state.get('isSideNavCollapsed'),
    isFiltersViewVisible: state.get('isFiltersViewVisible')
  };
}

export default injectModalTrigger(connect(null, {
  mapStateToProps,
  // saveRegistryCredentialAction,
})(RegistryVulnerabilityScan));
